{"version":3,"sources":["components/Header.js","components/SearchBar.js","components/IndividualMeme.js","components/MemeList.js","components/App.js","serviceWorker.js","index.js"],"names":["Header","Component","SearchBar","state","query","onInputChange","event","setState","target","value","onFormSubmit","preventDefault","props","className","onSubmit","this","type","placeholder","onChange","IndividualMeme","src","meme","images","preview_gif","url","alt","title","MemeList","renderedList","memes","map","key","id","KEY","App","getMemes","a","axios","get","params","api_key","q","response","console","log","data","length","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","message"],"mappings":"ySAceA,E,uKARX,OACE,gCACE,iD,GAJaC,aC2BNC,E,4MA1BXC,MAAQ,CAACC,MAAO,I,EAEhBC,cAAgB,SAACC,GACb,EAAKC,SAAU,CACXH,MAAOE,EAAME,OAAOC,S,EAI5BC,aAAe,SAACJ,GACbA,EAAMK,iBACP,EAAKC,MAAMF,aAAa,EAAKP,MAAMC,Q,uDAKnC,OACI,yBAAKS,UAAU,aACb,0BAAMA,UAAU,aAAaC,SAAUC,KAAKL,cACxC,8CACA,2BAAOM,KAAK,OAAOC,YAAY,yBAAyBR,MAAOM,KAAKZ,MAAMC,MAAOc,SAAUH,KAAKV,sB,GArBxFJ,aCQTkB,EATQ,SAACP,GACpB,OACI,6BACI,yBAAKQ,IAAKR,EAAMS,KAAKC,OAAOC,YAAYC,IAAKC,IAAKb,EAAMS,KAAKK,UCK1DC,EAPE,SAACf,GACd,IAAMgB,EAAehB,EAAMiB,MAAMC,KAAK,SAACT,GACnC,OAAO,kBAAC,EAAD,CAAgBA,KAAMA,EAAMU,IAAKV,EAAKW,QAEjD,OAAO,yBAAKnB,UAAU,iBAAiBe,I,iBCGrCK,EAAG,mCAgCMC,E,4MA7BX/B,MAAQ,CAAC0B,MAAO,I,EAEpBM,S,uCAAW,WAAO/B,GAAP,eAAAgC,EAAA,sEACgBC,IAAMC,IAAN,uCAAkD,CACvEC,OAAQ,CACNC,QAASP,EACTQ,EAAGrC,KAJA,OACDsC,EADC,OAQPC,QAAQC,IAAIF,EAASG,KAAKA,MAC1B,EAAKtC,SAAS,CACZsB,MAAOa,EAASG,KAAKA,OAVhB,2C,6GAeP,OACE,yBAAKhC,UAAU,OACf,kBAAC,EAAD,MACA,kBAAC,EAAD,CAAWH,aAAcK,KAAKoB,WAC9B,kBAAC,EAAD,CAAUN,MAAOd,KAAKZ,MAAM0B,QAC5B,qCAAWd,KAAKZ,MAAM0B,MAAMiB,OAA5B,e,GAvBY7C,aCAE8C,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2D,MCXNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDwHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLrB,QAAQqB,MAAMA,EAAMC,c","file":"static/js/main.f2e31928.chunk.js","sourcesContent":["import React, { Component } from 'react';\n\n\n\nclass Header extends Component {\n  render() {\n    return (\n      <header>\n        <h1>Pick a meme!</h1>\n      </header>\n    )\n  }\n}\n\nexport default Header;","import React, { Component } from 'react';\n\n\nclass SearchBar extends Component {\n\n    state = {query: \"\"}\n\n    onInputChange = (event) => {\n        this.setState ({ \n            query: event.target.value \n        });\n    }\n\n    onFormSubmit = (event) => {\n       event.preventDefault();\n      this.props.onFormSubmit(this.state.query)\n     }\n    \n\n    render() {\n      return (\n          <div className=\"searchBar\">\n            <form className=\"searchForm\" onSubmit={this.onFormSubmit}>    \n                <label>Meme Finder</label>\n                <input type=\"text\" placeholder=\"Enter your search term\" value={this.state.query} onChange={this.onInputChange}/>\n            </form>\n        </div>\n      )\n    }\n  }\n\nexport default SearchBar;","import React from 'react';\n\nconst IndividualMeme = (props) => {\n    return(\n        <div>\n            <img src={props.meme.images.preview_gif.url} alt={props.meme.title}></img>\n        </div>\n    )\n}\n\n\nexport default IndividualMeme;","import React from 'react';\nimport IndividualMeme from './IndividualMeme';\n\nconst MemeList = (props) => {\n    const renderedList = props.memes.map( (meme) => {\n        return <IndividualMeme meme={meme} key={meme.id} />\n    })\n    return <div className=\"rendered-list\">{renderedList}</div>\n}\n\nexport default MemeList;","import React, { Component } from 'react';\nimport Header from './Header';\nimport SearchBar from './SearchBar';\nimport MemeList from './MemeList';\nimport axios from 'axios';\n\n// Pull meme images from meme API \n// User selects meme image through form search bar\n// Memes displayed on page according to user selection\n\nconst KEY = `RUHodWF9tkJAFokry8lAL7QYCWLKQYpd`\n\nclass App extends Component {\n    state = {memes: []}\n  \ngetMemes = async (query) => {\n    const response = await axios.get(`https://api.giphy.com/v1/gifs/search`, {\n      params: {\n        api_key: KEY,\n        q: query,\n        \n      }\n    })\n    console.log(response.data.data);\n    this.setState({\n      memes: response.data.data\n    })\n}\n\n  render() {\n    return (\n      <div className=\"App\">\n      <Header />\n      <SearchBar onFormSubmit={this.getMemes} />\n      <MemeList memes={this.state.memes}/> \n      <p>Found: {this.state.memes.length} memes</p>\n      </div>\n\n    );  \n  } \n}\n\nexport default App;\n\n\n\n\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './components/App';\nimport * as serviceWorker from './serviceWorker';\nimport './App.css';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}